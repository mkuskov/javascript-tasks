// 1. Написать функцию, которая принимает на вход массив из двух чисел и возвращает сумму 
// этих двух чисел плюс сумму всех чисел между ними. Наименьшее число не всегда будет 
// на первом месте. (Например sumAll([4, 1]) должен возвращать 10)



// 2. Написать функцию, которая на вход принимает два массива и возвращает новый массив 
// с элементами найденными только в одном массиве, но не в обоих.



// 3. Написать функцию, которая на вход принимает массив и еще один или несколько 
// аргументов (точное количество не известно). Удалить из массива все элементы, которые 
// имеют то же значение, что и эти аргументы.



// 4. Создайте функцию, которая просматривает массив объектов (первый аргумент) и 
// возвращает массив всех объектов, имеющих совпадающие пары имя и значение (второй 
// аргумент). Например: whatIsInAName([{ "apple": 1, "bat": 2 }, { "apple": 1 }, { "apple": 1, "bat": 
// 2, "cookie": 2 }, { "bat":2 }], { "apple": 1, "bat": 2 }) должен вернуться [{ "apple": 1, "bat": 2 }, { 
// "apple": 1, "bat": 2, "cookie":2 }]



// 5. Написать функцию, которая конвертирует строку в spinal-case регистр.



// 6. Написать функцию, которая осуществляет поиск и замену в предложении. Первый 
// аргумент - это строка, в которой осуществляется поиск и замена. Второй аргумент - это 
// слово, которое нужно заменить, третий аргумент - слово, на которое нужно заменить. При 
// замене сохраняйте регистр первого символа в исходном слове.



// 7. Написать функцию, которая на вход принимает последовательность букв и ищет 
// пропущенные буквы. Если все буквы присутствуют в диапазоне, то возвращается 
// undefined. Например: fearNotLetter("abce") должна вернуть "d"



// 8. Написать функцию, которая принимает два или более массивов и возвращает новый 
// массив уникальных значений. Значения должны быть отсортированы по их 
// первоначальному порядку.



// 9. Написать функцию, которая заменяет символы &, <, >, "(двойные кавычки), и ‘(апостроф) 
// в строке их соответствующим HTML - кодом.



// 10. Написать функцию, которая суммирует все простые числа до n (аргумент функции)



// 11. Написать функцию, которая принимает массив и функцию и удаляет каждый элемент 
// массива начиная с первого, пока функция не вернет true, а затем возвращает оставшуюся 
// часть массива. Например: dropElements([1, 2, 3, 4], function(n) {return n >= 3;}) должна 
// вернуть [3, 4].



// 12. Написать функцию, которая принимает массив различной вложенности и возвращает 
// одномерный массив. Например: steamrollArray([1, [2], [3, [[4]]]]) должна вернуть [1, 2, 3, 4].



// 13. Написать функцию, которая суммирует два аргумента вместе. Если указан только один 
// аргумент, то возвращает функцию, которая ожидает второй аргумент и возвращает сумму